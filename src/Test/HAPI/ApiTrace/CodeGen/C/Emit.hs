{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE FlexibleContexts #-}

module Test.HAPI.ApiTrace.CodeGen.C.Emit (
  emitCCode
) where
import Language.C
import Data.Text (Text)
import qualified Data.Text as T
import Text.Printf (printf)
import Data.String (fromString)
import Text.RawString.QQ
import Test.HAPI.Constraint (CMembers)
import Test.HAPI.ApiTrace.CodeGen.C.DataType (CCodeGen, CBaseType, baseType2TypeDef, baseType2TypeDefCandidates)
import Test.HAPI.ApiTrace.CodeGen.C.Data (Entry2BlockC, traceMain)
import Test.HAPI.ApiTrace.Core (ApiTrace)
import Test.HAPI.ApiTrace.CodeGen.C.Util (struct, ptr, charTy)
import Data.List (nub)
import Test.HAPI.ApiTrace.CodeGen.C.State (CCodeGenState, declBaseTypes)
import Control.Lens ((^.))
import qualified Data.Set as S


hapiRequiredIncludes :: [Text]
hapiRequiredIncludes =
  [ "stdlib"
  , "stdio"
  , "stdbool"
  , "string"
  ]

hapiHeadComment :: Text
hapiHeadComment = [r|
/***
 *     ___  ___      ________      ________      ___
 *    |\  \|\  \    |\   __  \    |\   __  \    |\  \
 *    \ \  \\\  \   \ \  \|\  \   \ \  \|\  \   \ \  \
 *     \ \   __  \   \ \   __  \   \ \   ____\   \ \  \
 *      \ \  \ \  \   \ \  \ \  \   \ \  \___|    \ \  \
 *       \ \__\ \__\   \ \__\ \__\   \ \__\        \ \__\
 *        \|__|\|__|    \|__|\|__|    \|__|         \|__|
 *
 *  This trace file was generated by HAPI - A library/API testing framework in Haskell
 *
 */
|]

makeTypeDefs :: [CBaseType] -> [CExtDecl]
makeTypeDefs ts = map baseType2TypeDef $ nub $ concatMap baseType2TypeDefCandidates ts

hapiTypeDefs :: [CBaseType] -> Text
hapiTypeDefs = T.unlines . map (fromString . show . pretty) . makeTypeDefs

decl2CCode :: [Text] -> CCodeGenState -> CExtDecl -> Text
decl2CCode headers st cext = T.unlines
  [ hapiHeadComment
  , sysIncludeHeaders
  , apiIncludeHeaders
  , hapiTypeDefs (S.toList $ st ^. declBaseTypes)
  , fromString $ show $ pretty cext
  ]
  where
    sysIncludeHeaders = T.unlines [ "#include <"  <> lib <> ".h>"  | lib <- hapiRequiredIncludes]
    apiIncludeHeaders = T.unlines [ "#include \"" <> lib <> ".h\"" | lib <- headers]

emitCCode :: forall c api.
           ( CMembers CCodeGen c
           , Entry2BlockC api)
        => [String]
        -> ApiTrace api c
        -> Text
emitCCode headers trace = decl2CCode (map T.pack headers) st mn

  where
    (mn, st) = traceMain trace
